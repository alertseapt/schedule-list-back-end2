const { executeCheckinQuery, executeMercocampQuery } = require('../config/database');

/**
 * Servi√ßo de Monitoramento de Status de DP
 * 
 * Monitora mudan√ßas na situa√ß√£o dos DPs na tabela WTR e atualiza
 * automaticamente o status dos agendamentos quando DP for "Fechado"
 */
class DPStatusMonitoringService {
  constructor() {
    this.monitoringInterval = null;
    this.isRunning = false;
    this.checkIntervalMs = 30000; // 30 segundos
    this.statistics = {
      checks: 0,
      updates_made: 0,
      last_check: null,
      last_update: null,
      errors: 0
    };
  }

  /**
   * Inicia o servi√ßo de monitoramento
   */
  start() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è [DP-STATUS] Servi√ßo j√° est√° em execu√ß√£o');
      return;
    }

    console.log('üöÄ [DP-STATUS] Iniciando servi√ßo de monitoramento de situa√ß√£o DP...');
    this.isRunning = true;

    // Executar primeira verifica√ß√£o imediatamente
    this.checkDPStatus();

    // Configurar intervalo de verifica√ß√£o
    this.monitoringInterval = setInterval(() => {
      this.checkDPStatus();
    }, this.checkIntervalMs);

    console.log(`‚úÖ [DP-STATUS] Servi√ßo iniciado - verifica√ß√£o a cada ${this.checkIntervalMs / 1000}s`);
  }

  /**
   * Para o servi√ßo de monitoramento
   */
  stop() {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è [DP-STATUS] Servi√ßo j√° est√° parado');
      return;
    }

    console.log('üõë [DP-STATUS] Parando servi√ßo de monitoramento...');
    
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
    }

    this.isRunning = false;
    console.log('‚úÖ [DP-STATUS] Servi√ßo parado com sucesso');
  }

  /**
   * Executa verifica√ß√£o completa de status dos DPs
   */
  async checkDPStatus() {
    const startTime = Date.now();
    
    console.log('üîç [DP-STATUS] Iniciando verifica√ß√£o de situa√ß√£o dos DPs...');
    
    try {
      this.statistics.checks++;
      this.statistics.last_check = new Date().toISOString();

      // Buscar agendamentos que t√™m DP mas n√£o est√£o em "Em estoque"
      const schedulesToCheck = await this.getSchedulesForStatusCheck();
      
      if (schedulesToCheck.length === 0) {
        console.log('‚ÑπÔ∏è [DP-STATUS] Nenhum agendamento encontrado para verifica√ß√£o');
        return;
      }

      console.log(`üìã [DP-STATUS] ${schedulesToCheck.length} agendamentos para verificar`);

      let updatesCount = 0;

      // Verificar cada agendamento
      for (const schedule of schedulesToCheck) {
        try {
          const wasUpdated = await this.checkAndUpdateScheduleStatus(schedule);
          if (wasUpdated) {
            updatesCount++;
          }
        } catch (error) {
          console.error(`‚ùå [DP-STATUS] Erro ao verificar agendamento ${schedule.id}:`, error.message);
          this.statistics.errors++;
        }
      }

      const duration = Date.now() - startTime;
      
      if (updatesCount > 0) {
        this.statistics.updates_made += updatesCount;
        this.statistics.last_update = new Date().toISOString();
        console.log(`‚úÖ [DP-STATUS] ${updatesCount} agendamento(s) atualizado(s) para "Em estoque" em ${duration}ms`);
      } else {
        console.log(`‚ÑπÔ∏è [DP-STATUS] Verifica√ß√£o conclu√≠da - nenhuma atualiza√ß√£o necess√°ria (${duration}ms)`);
      }

    } catch (error) {
      console.error('‚ùå [DP-STATUS] Erro na verifica√ß√£o de situa√ß√£o:', error.message);
      this.statistics.errors++;
    }
  }

  /**
   * Busca agendamentos que precisam ser verificados
   */
  async getSchedulesForStatusCheck() {
    const query = `
      SELECT id, status, no_dp, number, client, historic
      FROM schedule_list 
      WHERE no_dp IS NOT NULL 
        AND no_dp != '' 
        AND status != 'Em estoque'
        AND status != 'Cancelado'
        AND status != 'Conclu√≠do'
      ORDER BY id DESC
      LIMIT 100
    `;

    return await executeCheckinQuery(query);
  }

  /**
   * Verifica e atualiza o status de um agendamento espec√≠fico
   */
  async checkAndUpdateScheduleStatus(schedule) {
    const logPrefix = `[DP-STATUS][ID:${schedule.id}]`;
    
    try {
      // Verificar situa√ß√£o do DP na tabela WTR
      const dpStatus = await this.getDPStatus(schedule.no_dp);
      
      if (!dpStatus) {
        console.log(`${logPrefix} ‚ö†Ô∏è DP ${schedule.no_dp} n√£o encontrado na tabela WTR`);
        return false;
      }

      console.log(`${logPrefix} üìã DP: ${schedule.no_dp} | Situa√ß√£o: "${dpStatus.situacao}"`);

      // Verificar se situa√ß√£o √© "Fechado"
      if (dpStatus.situacao && dpStatus.situacao.trim().toLowerCase() === 'fechado') {
        console.log(`${logPrefix} ‚úÖ DP est√° "Fechado" - atualizando status para "Em estoque"`);
        
        // Atualizar status do agendamento
        await this.updateScheduleToEmEstoque(schedule);
        
        return true;
      } else {
        console.log(`${logPrefix} ‚ÑπÔ∏è DP n√£o est√° fechado (situa√ß√£o: "${dpStatus.situacao}")`);
        return false;
      }

    } catch (error) {
      console.error(`${logPrefix} ‚ùå Erro:`, error.message);
      throw error;
    }
  }

  /**
   * Busca o status de um DP na tabela WTR
   */
  async getDPStatus(dpNumber) {
    const query = `
      SELECT no_dp, situacao, no_nf, cnpj
      FROM wtr 
      WHERE no_dp = ?
      LIMIT 1
    `;

    const results = await executeMercocampQuery(query, [dpNumber]);
    return results.length > 0 ? results[0] : null;
  }

  /**
   * Atualiza um agendamento para status "Em estoque"
   */
  async updateScheduleToEmEstoque(schedule) {
    const logPrefix = `[DP-STATUS][ID:${schedule.id}]`;
    
    try {
      // Preparar hist√≥rico atualizado
      let historic = {};
      if (schedule.historic) {
        try {
          historic = typeof schedule.historic === 'string' 
            ? JSON.parse(schedule.historic) 
            : schedule.historic;
        } catch (e) {
          console.warn(`${logPrefix} ‚ö†Ô∏è Erro ao parsear hist√≥rico existente, criando novo`);
          historic = {};
        }
      }

      // Adicionar entrada no hist√≥rico
      const timestamp = Date.now();
      const historicKey = `status_${timestamp}`;
      
      historic[historicKey] = {
        timestamp: new Date().toISOString(),
        user: 'Sistema',
        action: 'Status alterado automaticamente para Em estoque',
        comment: `DP ${schedule.no_dp} foi marcado como "Fechado" na tabela WTR`,
        previous_status: schedule.status,
        new_status: 'Em estoque',
        dp_number: schedule.no_dp,
        automated: true
      };

      // Atualizar agendamento
      const updateQuery = `
        UPDATE schedule_list 
        SET status = ?, historic = ? 
        WHERE id = ?
      `;

      await executeCheckinQuery(updateQuery, [
        'Em estoque',
        JSON.stringify(historic),
        schedule.id
      ]);

      console.log(`${logPrefix} ‚úÖ Agendamento atualizado: "${schedule.status}" ‚Üí "Em estoque"`);
      console.log(`${logPrefix} üìù Hist√≥rico atualizado com entrada do Sistema`);

    } catch (error) {
      console.error(`${logPrefix} ‚ùå Erro ao atualizar agendamento:`, error.message);
      throw error;
    }
  }

  /**
   * For√ßa verifica√ß√£o de um agendamento espec√≠fico
   */
  async forceCheckSchedule(scheduleId) {
    const logPrefix = `[DP-STATUS-FORCE][ID:${scheduleId}]`;
    
    try {
      console.log(`${logPrefix} üîç For√ßando verifica√ß√£o do agendamento...`);

      // Buscar agendamento
      const schedules = await executeCheckinQuery(
        'SELECT id, status, no_dp, number, client, historic FROM schedule_list WHERE id = ?',
        [scheduleId]
      );

      if (schedules.length === 0) {
        return {
          success: false,
          message: 'Agendamento n√£o encontrado'
        };
      }

      const schedule = schedules[0];

      if (!schedule.no_dp) {
        return {
          success: false,
          message: 'Agendamento n√£o possui DP atribu√≠do'
        };
      }

      if (schedule.status === 'Em estoque') {
        return {
          success: false,
          message: 'Agendamento j√° est√° em "Em estoque"'
        };
      }

      // Verificar e atualizar
      const wasUpdated = await this.checkAndUpdateScheduleStatus(schedule);

      if (wasUpdated) {
        return {
          success: true,
          message: 'Agendamento atualizado para "Em estoque"',
          dp_number: schedule.no_dp,
          previous_status: schedule.status,
          new_status: 'Em estoque'
        };
      } else {
        return {
          success: false,
          message: 'DP n√£o est√° em situa√ß√£o "Fechado" na tabela WTR',
          dp_number: schedule.no_dp
        };
      }

    } catch (error) {
      console.error(`${logPrefix} ‚ùå Erro na verifica√ß√£o for√ßada:`, error.message);
      return {
        success: false,
        message: 'Erro interno na verifica√ß√£o',
        error: error.message
      };
    }
  }

  /**
   * Retorna estat√≠sticas do servi√ßo
   */
  getStatistics() {
    return {
      ...this.statistics,
      is_running: this.isRunning,
      check_interval_seconds: this.checkIntervalMs / 1000,
      uptime_since_start: this.isRunning ? 'Em execu√ß√£o' : 'Parado'
    };
  }

  /**
   * Retorna status do servi√ßo
   */
  getStatus() {
    return {
      running: this.isRunning,
      check_interval: this.checkIntervalMs,
      statistics: this.getStatistics()
    };
  }

  /**
   * Configura o intervalo de verifica√ß√£o
   */
  setCheckInterval(intervalMs) {
    if (intervalMs < 10000) { // M√≠nimo 10 segundos
      throw new Error('Intervalo m√≠nimo √© 10 segundos');
    }

    const wasRunning = this.isRunning;
    
    if (wasRunning) {
      this.stop();
    }

    this.checkIntervalMs = intervalMs;
    console.log(`‚öôÔ∏è [DP-STATUS] Intervalo de verifica√ß√£o alterado para ${intervalMs / 1000}s`);

    if (wasRunning) {
      this.start();
    }
  }
}

module.exports = DPStatusMonitoringService;